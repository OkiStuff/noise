plugins {
  id "org.spongepowered.gradle.sponge.dev"
  id "net.kyori.indra"
  id "net.kyori.indra.publishing.sonatype"
  id "net.ltgt.errorprone"
  id "net.saliman.cobertura" version "4.0.0"
  id "com.github.kt3k.coveralls" version "2.12.0"
}

group 'org.spongepowered'
version '2.0.0-SNAPSHOT'
description 'Noise generation library for Java, based on the libnoise C++ library.'

configurations {
  tagletPath
}

dependencies {
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.2"
  errorprone "com.google.errorprone:error_prone_core:$errorproneVersion"
  errorprone "com.google.errorprone:error_prone_annotations:$errorproneVersion"
  tagletPath project(':noise-doclet-extras')
}

sourceSets {
  main {
    multirelease {
      alternateVersions(9)
      moduleName "org.spongepowered.noise"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.errorprone.disable("InvalidBlockTag")
}

def taglets = configurations.named('tagletPath').map { it.incoming.files }
def javaSrcDirs = sourceSets.named('main').map { it.allJava.srcDirs }
javadoc {
  inputs.files(taglets).withPropertyName("tagletPath")
  source("src/main/java9")
  def patchModuleOption = options.addStringOption('-patch-module')
  options.taglets("noise.build.SourceModulesTaglet")

  doFirst {
    patchModuleOption.setValue("org.spongepowered.noise=${javaSrcDirs.get().collect { it.absolutePath }.join(File.pathSeparator)}".toString())
    options.tagletPath(taglets.get().files.toList())
  }
}

afterEvaluate {
  javadoc {
    classpath += sourceSets.java9.output

    options {
      addStringOption("-release", "9")
      // addBooleanOption("-no-module-directories", false)
    }
  }
}

cobertura.coverageFormats = ['html', 'xml']

processResources {
  from(rootProject.rootDir) {
    include 'LICENSE.txt'
    def projectName = project.name
    rename { "LICENSE_${projectName}.txt" }
  }
}

spongeConvention {
  repository("noise") {
    ci(true)
    publishing(true)
  }
  mitLicense()
}

indra {
  configurePublications {
    pom {
      developers {
        developer {
          id = 'DDoS'
          name = 'Aleksi Sapon'
          email = 'qctechs@gmail.com'
        }
        developer {
          id = 'kitskub'
          name = 'Jack Huey'
          email = 'kitskub@gmail.com'
        }
        developer {
          id = 'Wolf480pl'
          name = 'Wolf480pl'
          email = 'wolf480@interia.pl'
        }
        developer {
          id = 'lukespragg'
          name = 'Luke Spragg'
          email = 'the@wulf.im'
        }
      }
    }
  }
}
